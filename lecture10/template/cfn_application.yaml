AWSTemplateFormatVersion: 2010-09-09
Description: create EC2, RDS, ALB, S3
Parameters:
  PJName:
    Type: String
    Default: "aws-lecture10"
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
  MyIP:
    Description: IP address allowed to access EC2
    Type: String
    Default: "0.0.0.0/0"
  DBMasterUsername:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]*$
    MaxLength: 16
    MinLength: 1
  DBMasterUserPassword:
    NoEcho: true
    Type: String
    MaxLength: 41
    MinLength: 8
  TagKey:
    Description: key for cost allocation tags
    Type: String
    Default: "RaiseTech"

Resources:
  # ------------------------------------------------------------#
  # InstanceProfile
  # ------------------------------------------------------------#
  CfnS3AccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !ImportValue CfnS3AccessRole-role-name

  # ------------------------------------------------------------#
  #  SecurityGroup for EC2
  # ------------------------------------------------------------#
  CfnEC2SecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${PJName}-ec2-sg"
      GroupDescription: SecurityGroup for EC2
      VpcId: !ImportValue CfnVPC-ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref CfnALBSecGrp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIP
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName

  # ------------------------------------------------------------#
  #  EC2
  # ------------------------------------------------------------#
  CfnEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e56f7ba9d8df2e9f
      IamInstanceProfile: !Ref CfnS3AccessInstanceProfile
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref CfnEC2SecGrp
          SubnetId: !ImportValue CfnPublicSubnet1A-ID
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 8
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y

          #install nginx
          sudo amazon-linux-extras install nginx1
          sudo systemctl start nginx

          #install MySQL client
          sudo yum remove mariadb-libs -y
          sudo yum localinstall -y https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
          sudo yum install -y mysql-community-client

          #install AWS CLI version2
          sudo yum remove -y awscli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      Tags:
        - Key: Name
          Value: !Sub "${PJName}-ec2"
        - Key: !Ref TagKey
          Value: !Ref PJName

  # ------------------------------------------------------------#
  #  SecurityGroup for RDS
  # ------------------------------------------------------------#
  CfnRDSSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${PJName}-rds-sg"
      GroupDescription: SecurityGroup for RDS
      VpcId: !ImportValue CfnVPC-ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref CfnEC2SecGrp
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName

  #-----------------------------------
  # SubnetGroup
  #-----------------------------------
  CfnRDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Sub "${PJName}-RDS-SubnetGroup"
      DBSubnetGroupDescription: !Sub "${PJName}-RDS-SubnetGroup"
      SubnetIds:
        - !ImportValue CfnPrivateSubnet1A-ID
        - !ImportValue CfnPrivateSubnet1C-ID
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName

  #-----------------------------------
  # RDS
  #-----------------------------------
  CfnRDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: !Sub "${PJName}-RDS"
      Engine: MySQL
      EngineVersion: "8.0.39"
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "20"
      StorageType: gp2
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      PubliclyAccessible: false
      MultiAZ: false
      AutoMinorVersionUpgrade: false
      VPCSecurityGroups:
        - !Ref CfnRDSSecGrp
      CopyTagsToSnapshot: true
      BackupRetentionPeriod: 0
      DBSubnetGroupName: !Ref CfnRDSSubnetGroup
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName

  # ------------------------------------------------------------#
  #  SecurityGroup for ALB
  # ------------------------------------------------------------#
  CfnALBSecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${PJName}-alb-sg"
      GroupDescription: SecurityGroup for ALB
      VpcId: !ImportValue CfnVPC-ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName

  # ------------------------------------------------------------#
  #  TargetGroup
  # ------------------------------------------------------------#
  CfnTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${PJName}-tg"
      VpcId: !ImportValue CfnVPC-ID
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckPath: "/"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200
      Targets:
        - Id: !Ref CfnEC2
          Port: 80
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName

  # ------------------------------------------------------------#
  #  ALB
  # ------------------------------------------------------------#
  CfnALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${PJName}-alb"
      Type: "application"
      IpAddressType: ipv4
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref CfnALBSecGrp
      Subnets:
        - !ImportValue CfnPublicSubnet1A-ID
        - !ImportValue CfnPublicSubnet1C-ID
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName
  CfnALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CfnTargetGroup
      LoadBalancerArn: !Ref CfnALB
      Port: 80
      Protocol: HTTP

  # ------------------------------------------------------------#
  #  S3
  # ------------------------------------------------------------#
  CfnS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${PJName}-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref PJName
